<%@ page pageEncoding="UTF-8" %>
<%@ taglib prefix="c" uri="jakarta.tags.core" %>
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Onlineplay homepage</title>

    <!-- For React -->
    <link rel="stylesheet" href="static/css/main.f855e6bc.css">

</head>

<body>
    <p>
        Sylvain's minimal version of the web application onlineplay.
    </p>
    <!-- begin to debug -->
    <!--
    <c:if test="${not empty sessionScope.userConnection}">
        <p>
            sessionScope.userConnection is defined :
            <ul>
            <li>
            sessionScope.userConnection.id : <c:out value="${sessionScope.userConnection.id}" />
            </li>
            <li>
            sessionScope.userConnection.ipAddress : <c:out value="${sessionScope.userConnection.ipAddress}" />
            </li>
            <li>
            sessionScope.userConnection.timestamp : <c:out value="${sessionScope.userConnection.timestamp}" />
            </li>
            <li>
            sessionScope.userConnection.userId : <c:out value="${sessionScope.userConnection.userId}" />
            </li>
            <li>
            sessionScope.userConnection.isAllowed : <c:out value="${sessionScope.userConnection.isAllowed}" />
            </li>
            </ul>
        </p>
    </c:if>
    <c:if test="${not empty sessionScope.user}">
        <p>
            sessionScope.user is defined :
            <ul>
            <li>
            sessionScope.user.id : <c:out value="${sessionScope.user.id}" />
            </li>
            <li>
            sessionScope.user.username : <c:out value="${sessionScope.user.username}" />
            </li>
            <li>
            sessionScope.user.passwordHash : <c:out value="${sessionScope.user.passwordHash}" />
            </li>
            <li>
            sessionScope.user.email : <c:out value="${sessionScope.user.email}" />
            </li>
            <li>
            sessionScope.user.message : <c:out value="${sessionScope.user.message}" />
            </li>
            </ul>
        </p>
    </c:if>
    -->
    <!-- end to debug -->

    <p>
        <a href="registration">Sign up</a>
        </br>
        <a href="authentication">log in</a>
        <c:if test="${sessionScope.userConnection.userId !=-1}">
            </br>
            <a href="logout">log out</a>
        </c:if>
        </br>
        <a href="javascript:void(0);" id="sendDummyUser01">Launch fake-user_01</a>
        <a href="javascript:void(1);" id="sendDummyUser02">Launch fake-user_02</a>
        <a href="javascript:void(2);" id="sendDummyUser03">Launch fake-user_03</a>
        </br>
        <a href="https://caltuli.online/docs/index.html">Project site generated by maven-site-plugin</a>
        </br>
        <a href="https://github.com/workaholic-v-0-0-0/onlineplay">Project sources on GitHub</a>
    </p>

    <c:if test="${sessionScope.userConnection.userId != -1}">
        <p>
            You are authenticated as <c:out value="${sessionScope.user.username}" />
            </br>
            Your user'id is <c:out value="${sessionScope.userConnection.userId}" />
        </p>
    </c:if>

    <div id="authenticatedUsersList">
        <p>Authenticated users list:</p>
        <ul>
            <!-- Quand la page est chargée, les noms des utilisateurs authentifiés
            sont récupérés dans le paramètre JSP authenticatedUsers -->
            <c:forEach var="entry" items="${authenticatedUsers}">
                <li>
                    <c:out value="${entry.value.username} says ${entry.value.message}" />
                    <!--<c:out value="${entry.value.message}" />-->
                </li>
            </c:forEach>
            <!-- Ensuite, les noms des utilisateurs authentifiés seront ajoutés
            ici par JavaScript -->
        </ul>
    </div>
    <div id="waitingToPlayUsersList">
        <p>Users who want to play a game:</p>
        <ul>
            <!-- Quand la page est chargée, les noms des utilisateurs qui souhaitent
            jouer une partie sont récupérés dans le paramètre JSP waitingToPlayUsers -->

            <!-- Ensuite, les nom des utilisateurs qui souhaitent jouer une
            partie seront ajoutés ici par JavaScript -->
        </ul>
    </div>
    <div id="gamesList">
        <p>Games in progress:</p>
        <ul>
            <!-- Quand la page est chargée, les résumés des parties en cours sont
            récupérés dans le paramètre JSP games -->
            <c:forEach var="entry" items="${games}">
                <li>
                    <c:out value="${entry.value.firstPlayerUsername}" />
                    <c:choose>
                        <c:when test="${not empty entry.value.secondPlayerUsername}">
                            <c:out value=" is waiting for an opponent." />
                        </c:when>
                        <c:otherwise>
                            <c:out value=" vs ${entry.value.secondPlayerUsername}" />
                        </c:otherwise>
                    </c:choose>

                </li>
            </c:forEach>
            <!-- Ensuite, les résumés des parties en cours seront ajoutés ici
            par JavaScript -->
        </ul>
    </div>

    <!-- Mise à jour de l'affichage des trois listes -->
    <script>
    document.addEventListener('DOMContentLoaded', function() {
        function fetchData() {
            fetch('user-activities')
                .then(function(response) {
                    return response.json();
                })
                .then(function(data) {
                    updatePlayersList(data.authenticatedUsers, '#authenticatedUsersList ul');
                    updateWaitingToPlayUsers(data.waitingToPlayUsers);
                    updateGamesList(data.games, '#gamesList ul');
                })
                .catch(function(error) {
                    console.error('Error:', error);
                });
        }

        function updatePlayersList(players, selector) {
            const playerListUl = document.querySelector(selector);
            if (!playerListUl) {
                console.error("Failed to find the element with selector:", selector);
                return;
            }

            // Créer un map des usernames existants pour vérification rapide
            const existingPlayers = Array.from(playerListUl.children).reduce((acc, li) => {
                acc[li.dataset.username] = li;
                return acc;
            }, {});

            // Ajouter ou mettre à jour les joueurs
            players.forEach(player => {
                let li = existingPlayers[player.username];
                if (!li) {
                    li = document.createElement('li');
                    li.dataset.username = player.username;
                    li.textContent = player.username;
                    playerListUl.appendChild(li);
                }
            });

            // Supprimer les éléments qui ne sont plus dans la liste
            Object.keys(existingPlayers).forEach(username => {
                if (!players.some(p => p.username === username)) {
                    playerListUl.removeChild(existingPlayers[username]);
                }
            });
        }

        function updateWaitingToPlayUsers(waitingToPlayUsers) {

            const waitingToPlayUsersUl = document.querySelector('#waitingToPlayUsersList ul');
            if (!waitingToPlayUsersUl) {
                console.error("Failed to find the element with selector: #waitingToPlayUsersList ul");
                return;
            }

            // Créer un map des id existants pour vérification rapide
            const existingWaitingToPlayUsers =
                Array
                    .from(waitingToPlayUsersUl.children)
                    .reduce((acc, li) => {
                        const userId = li.dataset.userId;
                        if (userId) {
                            acc[userId] = li;
                        }
                        return acc;
                    }, {});

            // Ajouter ou mettre à jour les joueurs
            waitingToPlayUsers.forEach(
                waitingToPlayUser => {
                    let li = existingWaitingToPlayUsers[waitingToPlayUser.id];
                    if (!li) {
                        li = document.createElement('li');

                        li.dataset.userId = waitingToPlayUser.id;

                        // Créer le formulaire et ses composants
                        const form = document.createElement('form');
                        form.action = "home";
                        form.method = "post";

                        // Champ caché pour l'action de jouer avec un autre utilisateur
                        const inputAction = document.createElement('input');
                        inputAction.type = "hidden";
                        inputAction.name = "action";
                        inputAction.value = "play_with";

                        // Champ caché pour l'ID de l'utilisateur contre qui jouer
                        const inputUserId = document.createElement('input');
                        inputUserId.type = "hidden";
                        inputUserId.name = "user_id";
                        inputUserId.value = waitingToPlayUser.id;

                        const inputSubmit = document.createElement('input');
                        inputSubmit.type = "submit";
                        inputSubmit.value = "Play with " + waitingToPlayUser.username;

                        // Assembler le formulaire
                        form.appendChild(inputAction);
                        form.appendChild(inputUserId);
                        form.appendChild(inputSubmit);

                        // Ajouter le formulaire à l'élément li
                        li.appendChild(form);

                        waitingToPlayUsersUl.appendChild(li);
                    }
                }
            );

            // Supprimer les éléments qui ne sont plus dans la liste
            Object.keys(existingWaitingToPlayUsers).forEach(userId => {
                if (!waitingToPlayUsers.some(user => user.id.toString() === userId)) {
                    waitingToPlayUsersUl.removeChild(existingWaitingToPlayUsers[userId]);
                }
            });
        }

        function updateGamesList(games, selector) {
            const gameListUl = document.querySelector(selector);
            if (!gameListUl) {
                console.error("Failed to find the element with selector:", selector);
                return;
            }

            // Créer un map des IDs de jeu existants pour vérification rapide
            const existingGames = Array.from(gameListUl.children).reduce((acc, li) => {
                acc[li.dataset.gameId] = li;
                return acc;
            }, {});

            // Ajouter ou mettre à jour les jeux
            games.forEach(game => {
                let li = existingGames[game.id];
                if (!li) {
                    // Si le jeu n'existe pas, on crée un nouvel élément
                    li = document.createElement('li');
                    li.dataset.gameId = game.id;
                    gameListUl.appendChild(li);
                }
                // Mettre à jour le texte de l'élément avec les informations actuelles du jeu
                li.textContent = `${game.id}: ${game.firstPlayer} vs ${game.secondPlayer || 'Waiting...'}`;
            });

            // Supprimer les éléments de jeux qui ne sont plus dans la liste
            Object.keys(existingGames).forEach(gameId => {
                if (!games.some(g => g.id.toString() === gameId)) {
                    gameListUl.removeChild(existingGames[gameId]);
                }
            });
        }

        // Refresh the data every 5 seconds
        setInterval(fetchData, 5000);
    });
    </script>

    <!-- user interaction simulations management -->

    <!-- if local -->
    <!--
    <script>
        document.getElementById('sendDummyUser01').addEventListener('click', function() {
            fetch('http://localhost:8000/dummyUser_local_01', {
                method: 'GET',
            })
            .then(response => {
                if(response.ok) {
                    return response.text();
                }
                throw new Error('The request failed.');
            })
            .then(data => {
                console.log(data);
            })
            .catch(error => {
                console.error(error);
            });
        });
        document.getElementById('sendDummyUser02').addEventListener('click', function() {
                    fetch('http://localhost:8000/dummyUser_local_02', {
                        method: 'GET',
                    })
                    .then(response => {
                        if(response.ok) {
                            return response.text();
                        }
                        throw new Error('The request failed.');
                    })
                    .then(data => {
                        console.log(data);
                    })
                    .catch(error => {
                        console.error(error);
                    });
                });
        document.getElementById('sendDummyUser03').addEventListener('click', function() {
                    fetch('http://localhost:8000/dummyUser_local_03', {
                        method: 'GET',
                    })
                    .then(response => {
                        if(response.ok) {
                            return response.text();
                        }
                        throw new Error('The request failed.');
                    })
                    .then(data => {
                        console.log(data);
                    })
                    .catch(error => {
                        console.error(error);
                    });
                });
    </script>
    -->

    <!-- if not local -->

    <script>
        document.getElementById('sendDummyUser01').addEventListener('click', function() {
            fetch('http://localhost:8000/dummyUser_01', {
                method: 'GET',
            })
            .then(response => {
                if(response.ok) {
                    return response.text();
                }
                throw new Error('The request failed.');
            })
            .then(data => {
                console.log(data);
            })
            .catch(error => {
                console.error(error);
            });
        });
        document.getElementById('sendDummyUser02').addEventListener('click', function() {
                    fetch('http://localhost:8000/dummyUser_02', {
                        method: 'GET',
                    })
                    .then(response => {
                        if(response.ok) {
                            return response.text();
                        }
                        throw new Error('The request failed.');
                    })
                    .then(data => {
                        console.log(data);
                    })
                    .catch(error => {
                        console.error(error);
                    });
                });
        document.getElementById('sendDummyUser03').addEventListener('click', function() {
                    fetch('http://localhost:8000/dummyUser_03', {
                        method: 'GET',
                    })
                    .then(response => {
                        if(response.ok) {
                            return response.text();
                        }
                        throw new Error('The request failed.');
                    })
                    .then(data => {
                        console.log(data);
                    })
                    .catch(error => {
                        console.error(error);
                    });
                });
    </script>

    <!-- To make the client able to propose a new game -->
    <form action="home" method="post">
        <input type="hidden" name="action" value="new_game">
        <input type="submit" value="New game"/>
    </form>

    <!-- For React -->
        <div id="root"></div>

        <!-- React scripts -->
        <script src="static/js/453.b110759a.chunk.js"></script>
        <script src="static/js/main.9e3e678c.js"></script>

</body>
</html>
