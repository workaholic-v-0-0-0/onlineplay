<%@ page pageEncoding="UTF-8" %>
<%@ taglib prefix="c" uri="jakarta.tags.core" %>
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Onlineplay homepage</title>

    <!-- For React -->
    <link rel="stylesheet" href="static/css/main.f855e6bc.css">

</head>

<body>
    <p>
        Sylvain's minimal version of the web application onlineplay.
    </p>
    <!-- begin to debug -->
    <!--
    <c:if test="${not empty sessionScope.userConnection}">
        <p>
            sessionScope.userConnection is defined :
            <ul>
            <li>
            sessionScope.userConnection.id : <c:out value="${sessionScope.userConnection.id}" />
            </li>
            <li>
            sessionScope.userConnection.ipAddress : <c:out value="${sessionScope.userConnection.ipAddress}" />
            </li>
            <li>
            sessionScope.userConnection.timestamp : <c:out value="${sessionScope.userConnection.timestamp}" />
            </li>
            <li>
            sessionScope.userConnection.userId : <c:out value="${sessionScope.userConnection.userId}" />
            </li>
            <li>
            sessionScope.userConnection.isAllowed : <c:out value="${sessionScope.userConnection.isAllowed}" />
            </li>
            </ul>
        </p>
    </c:if>
    <c:if test="${not empty sessionScope.user}">
        <p>
            sessionScope.user is defined :
            <ul>
            <li>
            sessionScope.user.id : <c:out value="${sessionScope.user.id}" />
            </li>
            <li>
            sessionScope.user.username : <c:out value="${sessionScope.user.username}" />
            </li>
            <li>
            sessionScope.user.passwordHash : <c:out value="${sessionScope.user.passwordHash}" />
            </li>
            <li>
            sessionScope.user.email : <c:out value="${sessionScope.user.email}" />
            </li>
            <li>
            sessionScope.user.message : <c:out value="${sessionScope.user.message}" />
            </li>
            </ul>
        </p>
    </c:if>
    -->
    <!-- end to debug -->

    <p>
        <a href="registration">Sign up</a>
        </br>
        <a href="authentication">log in</a>
        <c:if test="${sessionScope.userConnection.userId !=-1}">
            </br>
            <a href="logout">log out</a>
        </c:if>
        </br>
        <a href="javascript:void(0);" id="sendDummyUser01">Launch fake-user_01</a>
        <a href="javascript:void(1);" id="sendDummyUser02">Launch fake-user_02</a>
        <a href="javascript:void(2);" id="sendDummyUser03">Launch fake-user_03</a>
        </br>
        <a href="https://caltuli.online/docs/index.html">Project site generated by maven-site-plugin</a>
        </br>
        <a href="https://github.com/workaholic-v-0-0-0/onlineplay">Project sources on GitHub</a>
    </p>

    <c:if test="${sessionScope.userConnection.userId != -1}">
        <p>
            You are authenticated as <c:out value="${sessionScope.user.username}" />
            </br>
            Your user'id is <c:out value="${sessionScope.userConnection.userId}" />
        </p>
    </c:if>

    <div id="authenticatedUsersList">
        <p>Authenticated users list:</p>
        <ul>
            <!-- Quand la page est chargée, les noms des utilisateurs authentifiés
            sont récupérés dans le paramètre JSP authenticatedUsers -->
            <c:forEach var="entry" items="${authenticatedUsers}">
                <li
                    data-username="${entry.value.username}"
                    data-message="${entry.value.message}"
                    data-id="${entry.value.id}"
                >
                    <c:out value="${entry.value.username} (id: ${entry.value.id}), message: ${entry.value.message})" />
                </li>
            </c:forEach>
            <!-- Ensuite, cette liste sera mise à jour par JavaScript -->
        </ul>
    </div>
    <div id="waitingToPlayUsersList">
        <p>Users who want to play a game:</p>
        <ul>
            <!-- Quand la page est chargée, les noms des utilisateurs qui souhaitent
            jouer une partie sont récupérés dans le paramètre JSP waitingToPlayUsers -->
            <c:forEach var="entry" items="${waitingToPlayUsers}">
                <li
                    data-username="${entry.value.username}"
                    data-message="${entry.value.message}"
                    data-id="${entry.value.id}"
                >
                    <form action="home" method="post">
                        <input type="hidden" name="action" value="play_with">
                        <input type="hidden" name="user_id" value="${entry.value.id}">
                        <input type="submit" value="Play with ${entry.value.username}"/>
                    </form>
                </li>
            </c:forEach>
            <!-- Ensuite, les nom des utilisateurs qui souhaitent jouer une
            partie seront ajoutés ici par JavaScript -->
        </ul>
    </div>
    <div id="gamesList">
        <p>Games:</p>
        <ul>
            <!-- Quand la page est chargée, les résumés des parties en cours sont
            récupérés dans le paramètre JSP games -->
            <c:forEach var="entry" items="${games}">
                <li
                    data-id="${entry.value.id}"
                    data-firstPlayerUsername="${entry.value.firstPlayerUsername}"
                    data-secondPlayerUsername="${entry.value.secondPlayerUsername}"
                >
                    <c:choose>
                        <c:when test="${not empty entry.value.firstPlayerUsername}">
                            <c:out value="${entry.value.firstPlayerUsername}" />
                        </c:when>
                        <c:otherwise>
                            <c:out value="#nobody#" />
                        </c:otherwise>
                    </c:choose>
                    " vs "
                    <c:choose>
                        <c:when test="${not empty entry.value.secondPlayerUsername}">
                            <c:out value="${entry.value.secondPlayerUsername}" />
                        </c:when>
                        <c:otherwise>
                            <c:out value="#nobody#" />
                        </c:otherwise>
                    </c:choose>
                </li>
            </c:forEach>
            <!-- Ensuite, cette liste sera mise à jour par JavaScript -->
        </ul>
    </div>

    <!-- Mise à jour de l'affichage des trois listes -->
    <script>
    document.addEventListener('DOMContentLoaded', function() {
        function fetchData() {
            fetch('user-activities')
                .then(function(response) {
                    return response.json();
                })
                .then(function(data) {
                    updateAuthenticatedUsersList(data.authenticatedUsers);
                    updateWaitingToPlayUsers(data.waitingToPlayUsers);
                    updateGamesList(data.games);
                })
                .catch(function(error) {
                    console.error('Error:', error);
                });
        }

        function updateAuthenticatedUsersList(authenticatedUsers) {

            // fetch the ul component to update
            const authenticatedUsersListUl = document.querySelector('#authenticatedUsersList ul');
            if (!authenticatedUsersListUl) {
                console.error("Failed to find the element with selector:", '#authenticatedUsersList ul');
                return;
            }

            // catch displayed list in a map
            const existingAuthenticatedUsers =
                Array.from(authenticatedUsersListUl.children)
                    .reduce(
                        (acc, li) => {
                            acc[parseInt(li.dataset.id, 10)] = li;
                            return acc;
                        },
                        {}
                    );

            // add new authenticated users
            authenticatedUsers.forEach(authenticatedUser => {
                let li = existingAuthenticatedUsers[authenticatedUser.id];
                if (!li) {
                    li = document.createElement('li');
                    li.dataset.id = authenticatedUser.id.toString();
                    li.dataset.username = authenticatedUser.username;
                    li.dataset.message = authenticatedUser.message;
                    li.textContent =
                        authenticatedUser.username
                        + " (id: "
                        + authenticatedUser.id
                        + "), message: "
                        + authenticatedUser.message
                        + ")";
                    authenticatedUsersListUl.appendChild(li);
                }
            });

            // suppress authenticatedUsers not in the list anymore
            Object.keys(existingAuthenticatedUsers).forEach(id => {
                if (!authenticatedUsers.some(p => p.id === parseInt(id, 10))) {
                    authenticatedUsersListUl
                        .removeChild(existingAuthenticatedUsers[id]);
                }
            });
        }

        function updateWaitingToPlayUsers(waitingToPlayUsers) {

            // fetch the ul component to update
            const waitingToPlayUsersUl = document.querySelector('#waitingToPlayUsersList ul');
            if (!waitingToPlayUsersUl) {
                console.error("Failed to find the element with selector: #waitingToPlayUsersList ul");
                return;
            }

            // catch displayed list in a map
            const existingWaitingToPlayUsers =
                Array
                    .from(waitingToPlayUsersUl.children)
                    .reduce(
                        (acc, li) => {
                            acc[parseInt(li.dataset.id, 10)] = li;
                            return acc;
                        },
                        {}
                    );

            // Add new waiting to play users
            waitingToPlayUsers.forEach(
                waitingToPlayUser => {
                    let li = existingWaitingToPlayUsers[waitingToPlayUser.id];
                    if (!li) {

                        li = document.createElement('li');
                        li.dataset.id = waitingToPlayUser.id.toString();

                        // make form
                        const form = document.createElement('form');
                        form.action = "home";
                        form.method = "post";

                        // make hidden field indicating a user wants to play against the one who
                        // corresponds to this list item
                        const inputAction = document.createElement('input');
                        inputAction.type = "hidden";
                        inputAction.name = "action";
                        inputAction.value = "play_with";

                        // make hidden field indicating a user id of the user who
                        // corresponds to this list item
                        const inputUserId = document.createElement('input');
                        inputUserId.type = "hidden";
                        inputUserId.name = "user_id";
                        inputUserId.value = waitingToPlayUser.id.toString();

                        // make submit input
                        const inputSubmit = document.createElement('input');
                        inputSubmit.type = "submit";
                        inputSubmit.value = "Play with " + waitingToPlayUser.username;

                        // Assemble the form
                        form.appendChild(inputAction);
                        form.appendChild(inputUserId);
                        form.appendChild(inputSubmit);

                        // add the form to this list item element
                        li.appendChild(form);

                        waitingToPlayUsersUl.appendChild(li);
                    }
                }
            );

            // suppress users not waiting anymore to play
            Object.keys(existingWaitingToPlayUsers).forEach(id => {
                if (!waitingToPlayUsers.some(p => p.id === parseInt(id, 10))) {
                    waitingToPlayUsersUl.removeChild(existingWaitingToPlayUsers[id]);
                }
            });
        }

        function updateGamesList(games) {

            // fetch the ul component to update
            const gameListUl = document.querySelector('#gamesList ul');
            if (!gameListUl) {
                console.error("Failed to find the element with selector:", '#gamesList ul');
                return;
            }

            // catch displayed list in a map
            const existingGames =
                Array.from(gameListUl.children)
                    .reduce(
                        (acc, li) => {
                            acc[parseInt(li.dataset.id, 10)] = li;
                            return acc;
                        },
                        {}
                    );

            // add new games
            games.forEach(game => {
                let li = existingGames[game.id];
                if (!li) {
                    li = document.createElement('li');
                    li.dataset.id = game.id.toString();
                    li.dataset.firstPlayerUsername = game.firstPlayerUsername;
                    li.dataset.secondPlayerUsername = game.secondPlayerUsername;
                    gameListUl.appendChild(li);
                }
                li.textContent =
                    (!game.firsPlayerUsername || game.firsPlayerUsername.trim() === "") ?
                        "#nobody#" : "${game.firstPlayerUsername}
                    +
                    (!game.secondPlayerUsername || game.secondPlayerUsername.trim() === "") ?
                        "#nobody#" : "${game.secondPlayerUsername};
            });

            // suppress games not in the list anymore
            Object.keys(existingGames).forEach(id => {
                if (!games.some(g => g.id === parseInt(id, 10))) {
                    gameListUl.removeChild(existingGames[id]);
                }
            });
        }

        // Refresh the data every 5 seconds
        setInterval(fetchData, 5000);
    });
    </script>

    <!-- user interaction simulations management -->

    <!-- if local -->
    <!--
    <script>
        document.getElementById('sendDummyUser01').addEventListener('click', function() {
            fetch('http://localhost:8000/dummyUser_local_01', {
                method: 'GET',
            })
            .then(response => {
                if(response.ok) {
                    return response.text();
                }
                throw new Error('The request failed.');
            })
            .then(data => {
                console.log(data);
            })
            .catch(error => {
                console.error(error);
            });
        });
        document.getElementById('sendDummyUser02').addEventListener('click', function() {
                    fetch('http://localhost:8000/dummyUser_local_02', {
                        method: 'GET',
                    })
                    .then(response => {
                        if(response.ok) {
                            return response.text();
                        }
                        throw new Error('The request failed.');
                    })
                    .then(data => {
                        console.log(data);
                    })
                    .catch(error => {
                        console.error(error);
                    });
                });
        document.getElementById('sendDummyUser03').addEventListener('click', function() {
                    fetch('http://localhost:8000/dummyUser_local_03', {
                        method: 'GET',
                    })
                    .then(response => {
                        if(response.ok) {
                            return response.text();
                        }
                        throw new Error('The request failed.');
                    })
                    .then(data => {
                        console.log(data);
                    })
                    .catch(error => {
                        console.error(error);
                    });
                });
    </script>
    -->

    <!-- if not local -->

    <script>
        document.getElementById('sendDummyUser01').addEventListener('click', function() {
            fetch('http://localhost:8000/dummyUser_01', {
                method: 'GET',
            })
            .then(response => {
                if(response.ok) {
                    return response.text();
                }
                throw new Error('The request failed.');
            })
            .then(data => {
                console.log(data);
            })
            .catch(error => {
                console.error(error);
            });
        });
        document.getElementById('sendDummyUser02').addEventListener('click', function() {
                    fetch('http://localhost:8000/dummyUser_02', {
                        method: 'GET',
                    })
                    .then(response => {
                        if(response.ok) {
                            return response.text();
                        }
                        throw new Error('The request failed.');
                    })
                    .then(data => {
                        console.log(data);
                    })
                    .catch(error => {
                        console.error(error);
                    });
                });
        document.getElementById('sendDummyUser03').addEventListener('click', function() {
                    fetch('http://localhost:8000/dummyUser_03', {
                        method: 'GET',
                    })
                    .then(response => {
                        if(response.ok) {
                            return response.text();
                        }
                        throw new Error('The request failed.');
                    })
                    .then(data => {
                        console.log(data);
                    })
                    .catch(error => {
                        console.error(error);
                    });
                });
    </script>

    <!-- To make the client able to propose a new game -->
    <form action="home" method="post">
        <input type="hidden" name="action" value="new_game">
        <input type="submit" value="New game"/>
    </form>

    <!-- For React -->
        <div id="root"></div>

        <!-- React scripts -->
        <script src="static/js/453.b110759a.chunk.js"></script>
        <script src="static/js/main.9e3e678c.js"></script>

</body>
</html>
