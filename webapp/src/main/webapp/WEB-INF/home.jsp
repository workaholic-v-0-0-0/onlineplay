<%@ page pageEncoding="UTF-8" %>
<%@ taglib prefix="c" uri="jakarta.tags.core" %>
<%@ taglib prefix="fn" uri="jakarta.tags.functions" %>

<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Onlineplay homepage</title>
    <link rel="stylesheet" href="./resources/css/home.css">
    <link rel="stylesheet" href="${react.css}">
</head>

<body>
    <div class="container">
        <div class="half left">
            <p>Sylvain's minimal version of the web application onlineplay.</p>

            <!-- Allow users to perform actions via POST requests -->
            <p>
                <a href="registration">Sign up</a>
                </br>
                <a href="authentication">log in</a>
                <c:if test="${sessionScope.userConnection.userId !=-1}">
                    </br>
                    <a href="logout">log out</a>
                </c:if>
                </br>
                <!-- Provides functionality for clients to propose new games -->
                <form action="home" method="post">
                    <input type="hidden" name="action" value="new_game">
                    <input type="submit" value="New game"/>
                </form>
                </br>
                <a href="javascript:void(0);" id="sendDummyUser01">Launch fake-user_01</a>
                <a href="javascript:void(1);" id="sendDummyUser02">Launch fake-user_02</a>
                <a href="javascript:void(2);" id="sendDummyUser03">Launch fake-user_03</a>
                </br>
                <a href="https://caltuli.online/docs/index.html">
                    Project site generated by maven-site-plugin
                </a>
                </br>
                <a href="https://github.com/workaholic-v-0-0-0/onlineplay">
                    Project sources on GitHub
                </a>
            </p>

            <!-- Display information about the current user -->
            <c:if test="${sessionScope.userConnection.userId != -1}">
                <p>
                    You are authenticated as <c:out value="${sessionScope.user.username}" />.
                    </br>
                    Your user'id is <c:out value="${sessionScope.userConnection.userId}" />.
                </p>
            </c:if>

            <!-- Display lists of user activities -->
            <div id="authenticatedUsersList">
                <p>Authenticated users list:</p>
                <ul>
                    <!--
                        On page load, fetch and display authenticated user names from JSP
                        authenticatedUsers parameter
                    -->
                    <c:forEach var="entry" items="${authenticatedUsers}">
                        <li
                            data-username="${entry.value.username}"
                            data-message="${entry.value.message}"
                            data-id="${entry.value.id}"
                        >
                        <c:out value="${entry.value.username} (id: ${entry.value.id}),
                                message: ${entry.value.message})" />
                        </li>
                    </c:forEach>
                    <!-- This list will be updated via JavaScript as new users authenticate -->
                </ul>
            </div>
            <div id="waitingToPlayUsersList">
                <p>Users who want to play a game:</p>
                <ul>
                    <!--
                        On page load, fetch and display names of users waiting to play from JSP
                        waitingToPlayUsers parameter
                    -->
                    <c:forEach var="entry" items="${waitingToPlayUsers}">
                        <li
                            data-username="${entry.value.username}"
                            data-message="${entry.value.message}"
                            data-id="${entry.value.id}"
                        >
                            <form action="home" method="post">
                                <input type="hidden" name="action" value="play_with">
                                <input type="hidden" name="user_id" value="${entry.value.id}">
                                <input type="submit" value="Play with ${entry.value.username}"/>
                            </form>
                        </li>
                    </c:forEach>
                    <!--
                        This list will be dynamically updated via JavaScript as users express
                        interest to play
                    -->
                </ul>
            </div>
            <div id="gamesList">
                <p>Games:</p>
                <ul>
                    <!--
                        On page load, game summaries are fetched and displayed from JSP games
                        parameter
                    -->
                    <c:forEach var="entry" items="${games}">
                        <li
                            data-id="${entry.value.id}"
                            data-firstPlayerUsername="${entry.value.firstPlayerUsername}"
                            data-secondPlayerUsername="${entry.value.secondPlayerUsername}"
                        >
                            <c:choose>
                                <c:when test="${not empty entry.value.firstPlayerUsername}">
                                    <c:out value="${entry.value.firstPlayerUsername}" />
                                </c:when>
                                <c:otherwise>
                                    <c:out value="#nobody#" />
                                </c:otherwise>
                            </c:choose>
                            " vs "
                            <c:choose>
                                <c:when test="${not empty entry.value.secondPlayerUsername}">
                                    <c:out value="${entry.value.secondPlayerUsername}" />
                                </c:when>
                                <c:otherwise>
                                    <c:out value="#nobody#" />
                                </c:otherwise>
                            </c:choose>
                        </li>
                    </c:forEach>
                    <!-- This list will be updated via JavaScript as games progress -->
                </ul>
            </div>

            <!--
                This script periodically refreshes and updates the lists displayed on the page,
                including the list of authenticated users, users waiting for an opponent to play
                a game, and the list of ongoing games. These updates help ensure that the user
                interface reflects the most current data without needing to reload the entire page.
            -->
            <script src="resources/js/updateLists.js"></script>

            <!--
                This script is utilized for simulating user interactions to perform functional
                testing on the web application.
                It manages events that trigger GET requests for three simulated users, helping
                validate the application's functionality.
                These requests are processed by an HTTP server which runs from a JAR file
                generated by the 'batch.userInteractionSimulation' module.
                This setup allows developers to test and observe the application's response and
                error handling capabilities under simulated user activities.
            -->
            <script src="resources/js/fakeUsersManagement.js"></script>

        </div>

        <!-- React application area -->
        <div class="half right">

            <!-- The 'root' div serves as the mounting point for the React application -->
            <div id="root"></div>

            <!-- Initializing global variables for React application -->
            <script type="text/javascript">
              var game = '${game}';
              var gameId = '${fn:escapeXml(gameId)}';
              var playerId = '${fn:escapeXml(playerId)}';
            </script>

            <!--
                Load React runtime scripts which bootstrap the React application defined in App.js
                and utilize components like GameBoard.js. These scripts set up the initial React
                environment, enabling the React components to render dynamically within the root
                div. App.js defines the main application logic, managing states and WebSocket
                connections for live game updates, while GameBoard.js handles the rendering of the
                game's interactive grid.
            -->
            <script src="${react.chunk.js}"></script>
            <script src="${react.js}"></script>
        </div>
    </div>

</body>
</html>
